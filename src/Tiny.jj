options {
    Static = false;
}

PARSER_BEGIN(Tiny)

package it.unisannio.paradigmi.generated;
import it.unisannio.paradigmi.symbolTable.SymbolTable;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;


public class Tiny {
    public static void main(String[] args) throws ParseException, FileNotFoundException {
        InputStream s;
        if(args.length > 0){
                        String fileName = args[0];
                        s = new FileInputStream(args[0]);
                }

                else {
                    System.out.println(args.length);
                    s = System.in;
                }

        TinyTokenManager tokenmanager = new TinyTokenManager(new SimpleCharStream(s));
        Token token;

        while ((token = tokenmanager.getNextToken()).kind != EOF) {

            System.out.println("lessema: " + token.image + " --> Token associato: " + tokenImage[token.kind]);
        }



                System.out.println("N of keys: " + tokenmanager.KEYS);
                System.out.println("N of CONTROLS: " + tokenmanager.CONTROLS);
                System.out.println("N of comments: " + tokenmanager.COMMENTS);
                tokenmanager.symbolTable.printTable();
                SymbolTable.Record r = tokenmanager.symbolTable.getRecord("then",2,1);
                if(r != null)  System.out.println("\nricerca di prova " + r.getToken());


    }

    }



PARSER_END(Tiny)

// this adds paramiters to the tokenmanager
TOKEN_MGR_DECLS:{
   int KEYS=0;
   int CONTROLS=0;
   int COMMENTS=0;
   SymbolTable symbolTable = new SymbolTable();
}

TOKEN : {               // with this sintax you can describe an operation to activate whenever the token is detected.
   <END: "end">                                 { KEYS++;               }
  | <READFNC: "read">                           { KEYS++;               }
  | <WRITEFNC: "write">                         { KEYS++;               }
  | <SEMICOLON: ";">                            { KEYS++;               }
  | <THEN: "then">                              { KEYS++;               }
  | <IF: "if">                                  { KEYS++; CONTROLS++;   }
  | <REPEAT: "repeat">                          { KEYS++; CONTROLS++;   }
  | <UNTIL: "until">                            { KEYS++;               }
  | <ELSE: "else">
}

TOKEN:{
  <NUMBER: (<NUMBA>)+>                          { KEYS++;               }
  | <ID: <LETTER>(<LETTER> | <NUMBA> | "_" )*>  { KEYS++;               symbolTable.put(matchedToken.image, matchedToken.kind, matchedToken.beginLine, matchedToken.endLine, matchedToken.beginColumn, matchedToken.endColumn);}
}

TOKEN:{
   <ASSIGMENT: ":=">                            { KEYS++;              }
  | <LEF_BRA: "(">
  | <RIGHT_BRA: ")">
  | <MULT_DIV: ("/"|"*")>                       { KEYS++;              }
  | <SUM_DIF: ("-"|"+")>                        { KEYS++;              }
  | <COMPARISON: ("<"|"="|">")>                 { KEYS++;              }
}

TOKEN: {
  <#NUMBA: (["0"-"9"])>
  | <#LETTER: (["A"-"Z","a"-"z"])>
}


SKIP : {
    < SKIPPED : [" ", "\t", "\n", "\r"] >
   | <COMMENT: "{" (~["}"])* "}" > {COMMENTS++;}
}

void Program(): {}
{
    Statements()<EOF>
}

void Statements():{System.out.println("ciao");}
{
    Statement() <SEMICOLON> Statements()
}

void Statement():{}
{
    CallRead() | CallWrite()  | Assignment()  | RepeatUntil()  | IfThen()
}



void CallRead() : {}
{
<READFNC> <ID>
}

void CallWrite(): {}
{
<WRITEFNC> (<ID>|<NUMBER>)
}

void Assignment():{}
{
<ID> <ASSIGMENT> Expression()
}

void Expression(): {System.out.println(token.image); System.out.println("ciao");}
{
    MulDivExpr() <SUM_DIF> Expression()

}

void MulDivExpr():{}
{
    Factor() <MULT_DIV> MulDivExpr()
}

void Factor():{}
{
    <ID> | <NUMBER> | <LEF_BRA> Expression() <RIGHT_BRA>
}

void IfThen():{}
{
<IF> Condition() <THEN> Statements() (<ELSE> Statements())+ <END>
}

void Condition():{}
{
Expression() <COMPARISON> Expression()
}

void RepeatUntil():{}
{
<REPEAT> Statements() <UNTIL> Condition()
}